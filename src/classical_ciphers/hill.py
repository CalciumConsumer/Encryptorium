import numpy as np


def hill_matrix(key: str) -> np.ndarray:
    temp_array = []
    for c in key:
        if c == "/":
            continue
        temp_array.append(ord(c) - ord("a"))
    try:
        key_array = np.array(temp_array).reshape(int(np.sqrt(len(temp_array))), -1)
    except:
        raise Exception("Key must be of the format str_1/str_2/.../str_n where n is the size of all str_i")
    return key_array


def hill_encrypt(plaintext: str, key: str) -> str:
    plaintext = plaintext.lower()
    key = key.lower()
    matrix = hill_matrix(key)
    vector = [ord(c) - ord("a") for c in plaintext]
    if np.linalg.det(matrix) == 0:
        raise Exception("The matrix generated by the key is singular, choose a different key")
    cipher_vector = np.dot(matrix, vector) % 26
    ciphertext = ""
    for number in cipher_vector:
        ciphertext += chr(ord("a") + number)
    return ciphertext


def hill_decrypt(ciphertext: str, key: str) -> str:
    ciphertext = ciphertext.lower()
    key = key.lower()
    key_matrix = hill_matrix(key)
    modulus = 26

    # Compute the inverse of the key matrix modulo 'modulus'
    determinant = int(round(np.linalg.det(key_matrix)))
    determinant_mod_inv = pow(determinant, -1, modulus)
    adjugate_matrix = np.round(determinant * np.linalg.inv(key_matrix)).astype(int) % modulus
    inverse_key_matrix = (determinant_mod_inv * adjugate_matrix) % modulus

    # Prepare ciphertext blocks
    n = len(key_matrix)
    ciphertext_vector = [ord(char) - ord("a") for char in ciphertext]
    if len(ciphertext_vector) % n != 0:
        raise ValueError("Ciphertext length must be a multiple of the key matrix size.")

    # Decrypt each block
    plaintext_vector = []
    for i in range(0, len(ciphertext_vector), n):
        block = np.array(ciphertext_vector[i : i + n]).reshape(-1, 1)
        decrypted_block = np.dot(inverse_key_matrix, block) % modulus
        plaintext_vector.extend(decrypted_block.flatten())

    # Convert plaintext numbers back to letters
    plaintext = "".join(chr(int(num) + ord("a")) for num in plaintext_vector)
    return plaintext
